1c1
< #include "vm.h"
---
> #include "mmap.h"
3c3,4
< #include "bbl.h"
---
> #include "pk.h"
> #include "boot.h"
8d8
< #include "dev_map.h"
113d112
< 
142,172d140
< #ifdef PTE_TYPE
< static inline pte_t prot_to_type(int prot, int user)
< {
<   prot &= PROT_READ|PROT_WRITE|PROT_EXEC;
<   if (user) {
<     switch (prot) {
<       case PROT_NONE: return PTE_TYPE_SR;
<       case PROT_READ: return PTE_TYPE_UR_SR;
<       case PROT_WRITE: return PTE_TYPE_URW_SRW;
<       case PROT_EXEC: return PTE_TYPE_URX_SRX;
<       case PROT_READ|PROT_WRITE: return PTE_TYPE_URW_SRW;
<       case PROT_READ|PROT_EXEC: return PTE_TYPE_URX_SRX;
<       case PROT_WRITE|PROT_EXEC: return PTE_TYPE_URWX_SRWX;
<       case PROT_READ|PROT_WRITE|PROT_EXEC: return PTE_TYPE_URWX_SRWX;
<     }
<   } else {
<     switch (prot) {
<       case PROT_NONE:
<       case PROT_READ: return PTE_TYPE_SR;
<       case PROT_WRITE: return PTE_TYPE_SRW;
<       case PROT_EXEC: return PTE_TYPE_SRX;
<       case PROT_READ|PROT_WRITE: return PTE_TYPE_SRW;
<       case PROT_READ|PROT_EXEC: return PTE_TYPE_SRX;
<       case PROT_WRITE|PROT_EXEC: return PTE_TYPE_SRWX;
<       case PROT_READ|PROT_WRITE|PROT_EXEC: return PTE_TYPE_SRWX;
<     }
<   }
<   __builtin_unreachable();
< }
< 
< #else 
184,185d151
< #endif
< 
379,380c345,348
<         if (((prot & PROT_WRITE) && !PTE_UW(*pte))
<             || ((prot & PROT_EXEC) && !PTE_UX(*pte))) {
---
>         if (!(*pte & PTE_U) ||
>             ((prot & PROT_READ) && !(*pte & PTE_R)) ||
>             ((prot & PROT_WRITE) && !(*pte & PTE_W)) ||
>             ((prot & PROT_EXEC) && !(*pte & PTE_X))) {
416,543d383
< extern uintptr_t sbi_top_paddr();
< extern char sbi_base;
< #define extract_ppn(pte) (((uintptr_t)(pte))>>PTE_PPN_SHIFT)
< #define start_paddr(ppn) (((uintptr_t)(ppn))<<RISCV_PGSHIFT)
< #define end_paddr(ppn,level) (start_paddr(ppn) |((1 << (RISCV_PGSHIFT + RISCV_PGLEVEL_BITS * (level))) - 1))
< #define is_ptd(pte) ((((uintptr_t)(pte)) & 0xe) == 0)
< #define is_valid_pte(pte) (((uintptr_t)(pte)) & PTE_V)
< #define start_vaddr(vpn2,vpn1,vpn0) ((uintptr_t)(((vpn2)<<30|(vpn1)<<21|(vpn0)<<12)))
< #define end_vaddr(vpn2,vpn1,vpn0,level) (start_vaddr(vpn2,vpn1,vpn0) | ((1 << (RISCV_PGSHIFT + RISCV_PGLEVEL_BITS * (level))) - 1))
< 
< void mmap_display(pte_t* root_paddr)
< {
< 
< size_t i,j,k;
< 
< for (i=0;i<(1<<RISCV_PGLEVEL_BITS);i++){
<   pte_t pte = root_paddr[i];
<   if (is_valid_pte(pte)){
<     if(is_ptd(pte)){
<       pte_t * mid_base = (pte_t*)start_paddr(extract_ppn(pte));
<       for (j=0;j<(1<<RISCV_PGLEVEL_BITS) ; j++){
<         pte_t pte = mid_base[j];
<         if (is_valid_pte(pte)) {
<           if (is_ptd(pte)){
<             pte_t* leaf_base = (pte_t *)start_paddr(extract_ppn(pte));
<             for (k=0; k <(1<<RISCV_PGLEVEL_BITS) ; k++){
<               pte_t pte = leaf_base[k];
<               if (is_valid_pte(pte)){
<                 if (is_ptd(pte)){
<                   printm("bad PTE:");
<                 }
<                 printm("%p-%p -> %p-%p\n",
<                   start_vaddr(i,j,k),
<                   end_vaddr(i,j,k,0),
<                   start_paddr(extract_ppn(pte)),
<                   end_paddr(extract_ppn(pte),0)
<                   );
<               }
<             }
<           }
<           else {
<             printm("%p-%p -> %p-%p\n",
<               start_vaddr(i,j,0),
<               end_vaddr(i,j,0,1),
<               start_paddr(extract_ppn(pte)),
<               end_paddr(extract_ppn(pte),1)
<               );
<           }
<         }
<       }
<     }
<     else {
<       printm("%p-%p -> %p-%p\n",
<         start_vaddr(i,0,0),
<         end_vaddr(i,0,0,2),
<         start_paddr(extract_ppn(pte)),
<         end_paddr(extract_ppn(pte),2)
<         );
<     }
<   }
< }
< 
< }
< 
< void supervisor_mmap_display()
< {
< size_t i,j,k;
< pte_t * root_paddr = (pte_t*)(read_csr(sptbr)<<RISCV_PGSHIFT);
< 
< for (i=0;i<(1<<RISCV_PGLEVEL_BITS);i++){
<   pte_t pte = root_paddr[i];
<   if (is_valid_pte(pte)){
<     if(is_ptd(pte)){
<       pte_t * mid_base = (pte_t*)start_paddr(extract_ppn(pte));
<       for (j=0;j<(1<<RISCV_PGLEVEL_BITS) ; j++){
<         pte_t pte = mid_base[j];
<         if (is_valid_pte(pte)) {
<           if (is_ptd(pte)){
<             pte_t* leaf_base = (pte_t *)start_paddr(extract_ppn(pte));
<             for (k=0; k <(1<<RISCV_PGLEVEL_BITS) ; k++){
<               pte_t pte = leaf_base[k];
<               if (is_valid_pte(pte)){
<                 if (is_ptd(pte)){
<                   printk("bad PTE:");
<                 }
<                 printk("%p-%p -> %p-%p\n",
<                   start_vaddr(i,j,k),
<                   end_vaddr(i,j,k,0),
<                   start_paddr(extract_ppn(pte)),
<                   end_paddr(extract_ppn(pte),0)
<                   );
<               }
<             }
<           }
<           else {
<             printk("%p-%p -> %p-%p\n",
<               start_vaddr(i,j,0),
<               end_vaddr(i,j,0,1),
<               start_paddr(extract_ppn(pte)),
<               end_paddr(extract_ppn(pte),1)
<               );
<           }
<         }
<       }
<     }
<     else {
<       printk("%p-%p -> %p-%p\n",
<         start_vaddr(i,0,0),
<         end_vaddr(i,0,0,2),
<         start_paddr(extract_ppn(pte)),
<         end_paddr(extract_ppn(pte),2)
<         );
<     }
<   }
< }
< 
< }
< 
< int va_trans(uintptr_t vaddr, uintptr_t* ppa)
< {
<   pte_t * pte = __walk(vaddr);
<   if(is_valid_pte(*pte)){
<     *ppa = start_paddr(extract_ppn(*pte)) + (vaddr & (RISCV_PGSIZE - 1));
<     return 0;
<   }
<   return -1;
< }
< 
545,561c385
< 
< void vm_display()
< {
< #define SPTBR_PPN_FIELD 0x3fffffffff
< 
<   
<   write_csr(sptbr,(uintptr_t)root_page_table>> RISCV_PGSHIFT);
<   printm("sptbr loaded.\n");
< 
<   uintptr_t ptb = read_csr(sptbr);
<   uintptr_t ppn = ptb & SPTBR_PPN_FIELD;
<   uintptr_t root_paddr = ppn << RISCV_PGSHIFT;
<   printm("sptbr's ppn is %p, root_page_table is %p\n",root_paddr,(void*)root_page_table);
< 
< }
< 
< void vm_init()
---
> uintptr_t pk_vm_init()
569a394
> 
573,599c398
<   // printm("mem pages: %p, free_pages: %p, next_free_page: %p\n",mem_pages,free_pages,next_free_page);
<   // uintptr_t sbi_start = (uintptr_t)&sbi_base;
<   // uintptr_t sbi_term = (uintptr_t)sbi_top_paddr();
<   // uintptr_t sbi_vstart = (uintptr_t)((((DEV_MAP__mem__MASK + 1) << RISCV_PGSHIFT) -(sbi_term - sbi_start)));
<   // printm("sbi paddr: %p-%p, vaddr %p-%p\n",sbi_start,sbi_term,sbi_vstart,(1lu<<40));
<   
<   // __map_kernel_range(sbi_vstart,sbi_start,sbi_term - sbi_start,PROT_READ|PROT_EXEC);
<   
< 
<   // vm_display();
<   mmap_display(root_page_table);
< }
< 
< uintptr_t pk_vm_init()
< {
<   // size_t mem_pages = mem_size >> RISCV_PGSHIFT;
<   // free_pages = MAX(8, mem_pages >> (RISCV_PGLEVEL_BITS-1));
<   // first_free_page = first_free_paddr;
<   // first_free_paddr += free_pages * RISCV_PGSIZE;
< 
<   // root_page_table = (void*)__page_alloc();
<   // __map_kernel_range(DRAM_BASE, DRAM_BASE, first_free_paddr - DRAM_BASE, PROT_READ|PROT_WRITE|PROT_EXEC);
< 
<   // current.mmap_max = current.brk_max =
<   //   MIN(DRAM_BASE, mem_size - (first_free_paddr - DRAM_BASE));
< 
<   size_t stack_size = RISCV_PGSIZE * 128;
---
>   size_t stack_size = RISCV_PGSIZE * 64;
605d403
<   // printm("kernel stack top is %p\n", kernel_stack_top);
